/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ortoo.CheckPoint', null, global);
goog.exportSymbol('proto.ortoo.Client', null, global);
goog.exportSymbol('proto.ortoo.ClientRequest', null, global);
goog.exportSymbol('proto.ortoo.ClientResponse', null, global);
goog.exportSymbol('proto.ortoo.DatatypeMeta', null, global);
goog.exportSymbol('proto.ortoo.MessageHeader', null, global);
goog.exportSymbol('proto.ortoo.NotificationPushPull', null, global);
goog.exportSymbol('proto.ortoo.Operation', null, global);
goog.exportSymbol('proto.ortoo.OperationID', null, global);
goog.exportSymbol('proto.ortoo.PushPullPack', null, global);
goog.exportSymbol('proto.ortoo.PushPullRequest', null, global);
goog.exportSymbol('proto.ortoo.PushPullResponse', null, global);
goog.exportSymbol('proto.ortoo.ResponseState', null, global);
goog.exportSymbol('proto.ortoo.StateOfDatatype', null, global);
goog.exportSymbol('proto.ortoo.StateOfResponse', null, global);
goog.exportSymbol('proto.ortoo.SyncType', null, global);
goog.exportSymbol('proto.ortoo.Timestamp', null, global);
goog.exportSymbol('proto.ortoo.TypeOfDatatype', null, global);
goog.exportSymbol('proto.ortoo.TypeOfMessage', null, global);
goog.exportSymbol('proto.ortoo.TypeOfOperation', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ortoo.Client = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ortoo.Client, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ortoo.Client.displayName = 'proto.ortoo.Client';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ortoo.Timestamp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ortoo.Timestamp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ortoo.Timestamp.displayName = 'proto.ortoo.Timestamp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ortoo.OperationID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ortoo.OperationID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ortoo.OperationID.displayName = 'proto.ortoo.OperationID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ortoo.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ortoo.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ortoo.Operation.displayName = 'proto.ortoo.Operation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ortoo.PushPullPack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ortoo.PushPullPack.repeatedFields_, null);
};
goog.inherits(proto.ortoo.PushPullPack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ortoo.PushPullPack.displayName = 'proto.ortoo.PushPullPack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ortoo.CheckPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ortoo.CheckPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ortoo.CheckPoint.displayName = 'proto.ortoo.CheckPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ortoo.NotificationPushPull = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ortoo.NotificationPushPull, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ortoo.NotificationPushPull.displayName = 'proto.ortoo.NotificationPushPull';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ortoo.DatatypeMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ortoo.DatatypeMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ortoo.DatatypeMeta.displayName = 'proto.ortoo.DatatypeMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ortoo.MessageHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ortoo.MessageHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ortoo.MessageHeader.displayName = 'proto.ortoo.MessageHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ortoo.ResponseState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ortoo.ResponseState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ortoo.ResponseState.displayName = 'proto.ortoo.ResponseState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ortoo.ClientRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ortoo.ClientRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ortoo.ClientRequest.displayName = 'proto.ortoo.ClientRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ortoo.ClientResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ortoo.ClientResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ortoo.ClientResponse.displayName = 'proto.ortoo.ClientResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ortoo.PushPullRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ortoo.PushPullRequest.repeatedFields_, null);
};
goog.inherits(proto.ortoo.PushPullRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ortoo.PushPullRequest.displayName = 'proto.ortoo.PushPullRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ortoo.PushPullResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ortoo.PushPullResponse.repeatedFields_, null);
};
goog.inherits(proto.ortoo.PushPullResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ortoo.PushPullResponse.displayName = 'proto.ortoo.PushPullResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ortoo.Client.prototype.toObject = function(opt_includeInstance) {
  return proto.ortoo.Client.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ortoo.Client} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.Client.toObject = function(includeInstance, msg) {
  var f, obj = {
    cuid: msg.getCuid_asB64(),
    alias: jspb.Message.getFieldWithDefault(msg, 2, ""),
    collection: jspb.Message.getFieldWithDefault(msg, 3, ""),
    synctype: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ortoo.Client}
 */
proto.ortoo.Client.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ortoo.Client;
  return proto.ortoo.Client.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ortoo.Client} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ortoo.Client}
 */
proto.ortoo.Client.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollection(value);
      break;
    case 4:
      var value = /** @type {!proto.ortoo.SyncType} */ (reader.readEnum());
      msg.setSynctype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ortoo.Client.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ortoo.Client.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ortoo.Client} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.Client.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCuid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAlias();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCollection();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSynctype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional bytes CUID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ortoo.Client.prototype.getCuid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes CUID = 1;
 * This is a type-conversion wrapper around `getCuid()`
 * @return {string}
 */
proto.ortoo.Client.prototype.getCuid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCuid()));
};


/**
 * optional bytes CUID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCuid()`
 * @return {!Uint8Array}
 */
proto.ortoo.Client.prototype.getCuid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCuid()));
};


/** @param {!(string|Uint8Array)} value */
proto.ortoo.Client.prototype.setCuid = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string alias = 2;
 * @return {string}
 */
proto.ortoo.Client.prototype.getAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ortoo.Client.prototype.setAlias = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string collection = 3;
 * @return {string}
 */
proto.ortoo.Client.prototype.getCollection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ortoo.Client.prototype.setCollection = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional SyncType syncType = 4;
 * @return {!proto.ortoo.SyncType}
 */
proto.ortoo.Client.prototype.getSynctype = function() {
  return /** @type {!proto.ortoo.SyncType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.ortoo.SyncType} value */
proto.ortoo.Client.prototype.setSynctype = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ortoo.Timestamp.prototype.toObject = function(opt_includeInstance) {
  return proto.ortoo.Timestamp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ortoo.Timestamp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.Timestamp.toObject = function(includeInstance, msg) {
  var f, obj = {
    era: jspb.Message.getFieldWithDefault(msg, 1, 0),
    lamport: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cuid: msg.getCuid_asB64(),
    delimiter: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ortoo.Timestamp}
 */
proto.ortoo.Timestamp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ortoo.Timestamp;
  return proto.ortoo.Timestamp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ortoo.Timestamp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ortoo.Timestamp}
 */
proto.ortoo.Timestamp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEra(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLamport(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCuid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDelimiter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ortoo.Timestamp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ortoo.Timestamp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ortoo.Timestamp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.Timestamp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEra();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLamport();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getCuid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getDelimiter();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 era = 1;
 * @return {number}
 */
proto.ortoo.Timestamp.prototype.getEra = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ortoo.Timestamp.prototype.setEra = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 lamport = 2;
 * @return {number}
 */
proto.ortoo.Timestamp.prototype.getLamport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ortoo.Timestamp.prototype.setLamport = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes CUID = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ortoo.Timestamp.prototype.getCuid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes CUID = 3;
 * This is a type-conversion wrapper around `getCuid()`
 * @return {string}
 */
proto.ortoo.Timestamp.prototype.getCuid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCuid()));
};


/**
 * optional bytes CUID = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCuid()`
 * @return {!Uint8Array}
 */
proto.ortoo.Timestamp.prototype.getCuid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCuid()));
};


/** @param {!(string|Uint8Array)} value */
proto.ortoo.Timestamp.prototype.setCuid = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint32 delimiter = 4;
 * @return {number}
 */
proto.ortoo.Timestamp.prototype.getDelimiter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ortoo.Timestamp.prototype.setDelimiter = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ortoo.OperationID.prototype.toObject = function(opt_includeInstance) {
  return proto.ortoo.OperationID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ortoo.OperationID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.OperationID.toObject = function(includeInstance, msg) {
  var f, obj = {
    era: jspb.Message.getFieldWithDefault(msg, 1, 0),
    lamport: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    cuid: msg.getCuid_asB64(),
    seq: jspb.Message.getFieldWithDefault(msg, 4, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ortoo.OperationID}
 */
proto.ortoo.OperationID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ortoo.OperationID;
  return proto.ortoo.OperationID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ortoo.OperationID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ortoo.OperationID}
 */
proto.ortoo.OperationID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEra(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setLamport(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCuid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setSeq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ortoo.OperationID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ortoo.OperationID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ortoo.OperationID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.OperationID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEra();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLamport();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getCuid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getSeq();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      4,
      f
    );
  }
};


/**
 * optional uint32 era = 1;
 * @return {number}
 */
proto.ortoo.OperationID.prototype.getEra = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ortoo.OperationID.prototype.setEra = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 lamport = 2;
 * @return {string}
 */
proto.ortoo.OperationID.prototype.getLamport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.ortoo.OperationID.prototype.setLamport = function(value) {
  jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional bytes CUID = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ortoo.OperationID.prototype.getCuid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes CUID = 3;
 * This is a type-conversion wrapper around `getCuid()`
 * @return {string}
 */
proto.ortoo.OperationID.prototype.getCuid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCuid()));
};


/**
 * optional bytes CUID = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCuid()`
 * @return {!Uint8Array}
 */
proto.ortoo.OperationID.prototype.getCuid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCuid()));
};


/** @param {!(string|Uint8Array)} value */
proto.ortoo.OperationID.prototype.setCuid = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint64 seq = 4;
 * @return {string}
 */
proto.ortoo.OperationID.prototype.getSeq = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/** @param {string} value */
proto.ortoo.OperationID.prototype.setSeq = function(value) {
  jspb.Message.setProto3StringIntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ortoo.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.ortoo.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ortoo.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.ortoo.OperationID.toObject(includeInstance, f),
    optype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ortoo.Operation}
 */
proto.ortoo.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ortoo.Operation;
  return proto.ortoo.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ortoo.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ortoo.Operation}
 */
proto.ortoo.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ortoo.OperationID;
      reader.readMessage(value,proto.ortoo.OperationID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.ortoo.TypeOfOperation} */ (reader.readEnum());
      msg.setOptype(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ortoo.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ortoo.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ortoo.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ortoo.OperationID.serializeBinaryToWriter
    );
  }
  f = message.getOptype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional OperationID ID = 1;
 * @return {?proto.ortoo.OperationID}
 */
proto.ortoo.Operation.prototype.getId = function() {
  return /** @type{?proto.ortoo.OperationID} */ (
    jspb.Message.getWrapperField(this, proto.ortoo.OperationID, 1));
};


/** @param {?proto.ortoo.OperationID|undefined} value */
proto.ortoo.Operation.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ortoo.Operation.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ortoo.Operation.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TypeOfOperation opType = 2;
 * @return {!proto.ortoo.TypeOfOperation}
 */
proto.ortoo.Operation.prototype.getOptype = function() {
  return /** @type {!proto.ortoo.TypeOfOperation} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ortoo.TypeOfOperation} value */
proto.ortoo.Operation.prototype.setOptype = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bytes body = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ortoo.Operation.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes body = 3;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.ortoo.Operation.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.ortoo.Operation.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/** @param {!(string|Uint8Array)} value */
proto.ortoo.Operation.prototype.setBody = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ortoo.PushPullPack.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ortoo.PushPullPack.prototype.toObject = function(opt_includeInstance) {
  return proto.ortoo.PushPullPack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ortoo.PushPullPack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.PushPullPack.toObject = function(includeInstance, msg) {
  var f, obj = {
    duid: msg.getDuid_asB64(),
    key: jspb.Message.getFieldWithDefault(msg, 2, ""),
    option: jspb.Message.getFieldWithDefault(msg, 3, 0),
    checkpoint: (f = msg.getCheckpoint()) && proto.ortoo.CheckPoint.toObject(includeInstance, f),
    era: jspb.Message.getFieldWithDefault(msg, 5, 0),
    type: jspb.Message.getFieldWithDefault(msg, 6, 0),
    operationsList: jspb.Message.toObjectList(msg.getOperationsList(),
    proto.ortoo.Operation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ortoo.PushPullPack}
 */
proto.ortoo.PushPullPack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ortoo.PushPullPack;
  return proto.ortoo.PushPullPack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ortoo.PushPullPack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ortoo.PushPullPack}
 */
proto.ortoo.PushPullPack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setOption(value);
      break;
    case 4:
      var value = new proto.ortoo.CheckPoint;
      reader.readMessage(value,proto.ortoo.CheckPoint.deserializeBinaryFromReader);
      msg.setCheckpoint(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEra(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 7:
      var value = new proto.ortoo.Operation;
      reader.readMessage(value,proto.ortoo.Operation.deserializeBinaryFromReader);
      msg.addOperations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ortoo.PushPullPack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ortoo.PushPullPack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ortoo.PushPullPack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.PushPullPack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDuid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOption();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getCheckpoint();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ortoo.CheckPoint.serializeBinaryToWriter
    );
  }
  f = message.getEra();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getOperationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.ortoo.Operation.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes DUID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ortoo.PushPullPack.prototype.getDuid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes DUID = 1;
 * This is a type-conversion wrapper around `getDuid()`
 * @return {string}
 */
proto.ortoo.PushPullPack.prototype.getDuid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDuid()));
};


/**
 * optional bytes DUID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDuid()`
 * @return {!Uint8Array}
 */
proto.ortoo.PushPullPack.prototype.getDuid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDuid()));
};


/** @param {!(string|Uint8Array)} value */
proto.ortoo.PushPullPack.prototype.setDuid = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.ortoo.PushPullPack.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ortoo.PushPullPack.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional fixed32 option = 3;
 * @return {number}
 */
proto.ortoo.PushPullPack.prototype.getOption = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ortoo.PushPullPack.prototype.setOption = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional CheckPoint checkPoint = 4;
 * @return {?proto.ortoo.CheckPoint}
 */
proto.ortoo.PushPullPack.prototype.getCheckpoint = function() {
  return /** @type{?proto.ortoo.CheckPoint} */ (
    jspb.Message.getWrapperField(this, proto.ortoo.CheckPoint, 4));
};


/** @param {?proto.ortoo.CheckPoint|undefined} value */
proto.ortoo.PushPullPack.prototype.setCheckpoint = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ortoo.PushPullPack.prototype.clearCheckpoint = function() {
  this.setCheckpoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ortoo.PushPullPack.prototype.hasCheckpoint = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 era = 5;
 * @return {number}
 */
proto.ortoo.PushPullPack.prototype.getEra = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ortoo.PushPullPack.prototype.setEra = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 type = 6;
 * @return {number}
 */
proto.ortoo.PushPullPack.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.ortoo.PushPullPack.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated Operation operations = 7;
 * @return {!Array<!proto.ortoo.Operation>}
 */
proto.ortoo.PushPullPack.prototype.getOperationsList = function() {
  return /** @type{!Array<!proto.ortoo.Operation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ortoo.Operation, 7));
};


/** @param {!Array<!proto.ortoo.Operation>} value */
proto.ortoo.PushPullPack.prototype.setOperationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.ortoo.Operation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ortoo.Operation}
 */
proto.ortoo.PushPullPack.prototype.addOperations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.ortoo.Operation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.ortoo.PushPullPack.prototype.clearOperationsList = function() {
  this.setOperationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ortoo.CheckPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.ortoo.CheckPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ortoo.CheckPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.CheckPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    sseq: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    cseq: jspb.Message.getFieldWithDefault(msg, 2, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ortoo.CheckPoint}
 */
proto.ortoo.CheckPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ortoo.CheckPoint;
  return proto.ortoo.CheckPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ortoo.CheckPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ortoo.CheckPoint}
 */
proto.ortoo.CheckPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setSseq(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setCseq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ortoo.CheckPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ortoo.CheckPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ortoo.CheckPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.CheckPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSseq();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getCseq();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
};


/**
 * optional uint64 sseq = 1;
 * @return {string}
 */
proto.ortoo.CheckPoint.prototype.getSseq = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.ortoo.CheckPoint.prototype.setSseq = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint64 cseq = 2;
 * @return {string}
 */
proto.ortoo.CheckPoint.prototype.getCseq = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.ortoo.CheckPoint.prototype.setCseq = function(value) {
  jspb.Message.setProto3StringIntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ortoo.NotificationPushPull.prototype.toObject = function(opt_includeInstance) {
  return proto.ortoo.NotificationPushPull.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ortoo.NotificationPushPull} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.NotificationPushPull.toObject = function(includeInstance, msg) {
  var f, obj = {
    cuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    duid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sseq: jspb.Message.getFieldWithDefault(msg, 3, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ortoo.NotificationPushPull}
 */
proto.ortoo.NotificationPushPull.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ortoo.NotificationPushPull;
  return proto.ortoo.NotificationPushPull.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ortoo.NotificationPushPull} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ortoo.NotificationPushPull}
 */
proto.ortoo.NotificationPushPull.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setSseq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ortoo.NotificationPushPull.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ortoo.NotificationPushPull.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ortoo.NotificationPushPull} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.NotificationPushPull.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSseq();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      3,
      f
    );
  }
};


/**
 * optional string CUID = 1;
 * @return {string}
 */
proto.ortoo.NotificationPushPull.prototype.getCuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ortoo.NotificationPushPull.prototype.setCuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string DUID = 2;
 * @return {string}
 */
proto.ortoo.NotificationPushPull.prototype.getDuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ortoo.NotificationPushPull.prototype.setDuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 sseq = 3;
 * @return {string}
 */
proto.ortoo.NotificationPushPull.prototype.getSseq = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/** @param {string} value */
proto.ortoo.NotificationPushPull.prototype.setSseq = function(value) {
  jspb.Message.setProto3StringIntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ortoo.DatatypeMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.ortoo.DatatypeMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ortoo.DatatypeMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.DatatypeMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    duid: msg.getDuid_asB64(),
    opid: (f = msg.getOpid()) && proto.ortoo.OperationID.toObject(includeInstance, f),
    pb_typeof: jspb.Message.getFieldWithDefault(msg, 4, 0),
    state: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ortoo.DatatypeMeta}
 */
proto.ortoo.DatatypeMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ortoo.DatatypeMeta;
  return proto.ortoo.DatatypeMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ortoo.DatatypeMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ortoo.DatatypeMeta}
 */
proto.ortoo.DatatypeMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDuid(value);
      break;
    case 3:
      var value = new proto.ortoo.OperationID;
      reader.readMessage(value,proto.ortoo.OperationID.deserializeBinaryFromReader);
      msg.setOpid(value);
      break;
    case 4:
      var value = /** @type {!proto.ortoo.TypeOfDatatype} */ (reader.readEnum());
      msg.setTypeof(value);
      break;
    case 5:
      var value = /** @type {!proto.ortoo.StateOfDatatype} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ortoo.DatatypeMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ortoo.DatatypeMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ortoo.DatatypeMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.DatatypeMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDuid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getOpid();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ortoo.OperationID.serializeBinaryToWriter
    );
  }
  f = message.getTypeof();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.ortoo.DatatypeMeta.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ortoo.DatatypeMeta.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes DUID = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ortoo.DatatypeMeta.prototype.getDuid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes DUID = 2;
 * This is a type-conversion wrapper around `getDuid()`
 * @return {string}
 */
proto.ortoo.DatatypeMeta.prototype.getDuid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDuid()));
};


/**
 * optional bytes DUID = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDuid()`
 * @return {!Uint8Array}
 */
proto.ortoo.DatatypeMeta.prototype.getDuid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDuid()));
};


/** @param {!(string|Uint8Array)} value */
proto.ortoo.DatatypeMeta.prototype.setDuid = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional OperationID opID = 3;
 * @return {?proto.ortoo.OperationID}
 */
proto.ortoo.DatatypeMeta.prototype.getOpid = function() {
  return /** @type{?proto.ortoo.OperationID} */ (
    jspb.Message.getWrapperField(this, proto.ortoo.OperationID, 3));
};


/** @param {?proto.ortoo.OperationID|undefined} value */
proto.ortoo.DatatypeMeta.prototype.setOpid = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ortoo.DatatypeMeta.prototype.clearOpid = function() {
  this.setOpid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ortoo.DatatypeMeta.prototype.hasOpid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TypeOfDatatype typeOf = 4;
 * @return {!proto.ortoo.TypeOfDatatype}
 */
proto.ortoo.DatatypeMeta.prototype.getTypeof = function() {
  return /** @type {!proto.ortoo.TypeOfDatatype} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.ortoo.TypeOfDatatype} value */
proto.ortoo.DatatypeMeta.prototype.setTypeof = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional StateOfDatatype state = 5;
 * @return {!proto.ortoo.StateOfDatatype}
 */
proto.ortoo.DatatypeMeta.prototype.getState = function() {
  return /** @type {!proto.ortoo.StateOfDatatype} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.ortoo.StateOfDatatype} value */
proto.ortoo.DatatypeMeta.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ortoo.MessageHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.ortoo.MessageHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ortoo.MessageHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.MessageHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seq: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pb_typeof: jspb.Message.getFieldWithDefault(msg, 3, 0),
    collection: jspb.Message.getFieldWithDefault(msg, 4, ""),
    clientalias: jspb.Message.getFieldWithDefault(msg, 5, ""),
    cuid: msg.getCuid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ortoo.MessageHeader}
 */
proto.ortoo.MessageHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ortoo.MessageHeader;
  return proto.ortoo.MessageHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ortoo.MessageHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ortoo.MessageHeader}
 */
proto.ortoo.MessageHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeq(value);
      break;
    case 3:
      var value = /** @type {!proto.ortoo.TypeOfMessage} */ (reader.readEnum());
      msg.setTypeof(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollection(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientalias(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ortoo.MessageHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ortoo.MessageHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ortoo.MessageHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.MessageHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeq();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTypeof();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getCollection();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getClientalias();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCuid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.ortoo.MessageHeader.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ortoo.MessageHeader.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 seq = 2;
 * @return {number}
 */
proto.ortoo.MessageHeader.prototype.getSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ortoo.MessageHeader.prototype.setSeq = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional TypeOfMessage typeOf = 3;
 * @return {!proto.ortoo.TypeOfMessage}
 */
proto.ortoo.MessageHeader.prototype.getTypeof = function() {
  return /** @type {!proto.ortoo.TypeOfMessage} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.ortoo.TypeOfMessage} value */
proto.ortoo.MessageHeader.prototype.setTypeof = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string collection = 4;
 * @return {string}
 */
proto.ortoo.MessageHeader.prototype.getCollection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ortoo.MessageHeader.prototype.setCollection = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string clientAlias = 5;
 * @return {string}
 */
proto.ortoo.MessageHeader.prototype.getClientalias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.ortoo.MessageHeader.prototype.setClientalias = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bytes cuid = 6;
 * @return {!(string|Uint8Array)}
 */
proto.ortoo.MessageHeader.prototype.getCuid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes cuid = 6;
 * This is a type-conversion wrapper around `getCuid()`
 * @return {string}
 */
proto.ortoo.MessageHeader.prototype.getCuid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCuid()));
};


/**
 * optional bytes cuid = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCuid()`
 * @return {!Uint8Array}
 */
proto.ortoo.MessageHeader.prototype.getCuid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCuid()));
};


/** @param {!(string|Uint8Array)} value */
proto.ortoo.MessageHeader.prototype.setCuid = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ortoo.ResponseState.prototype.toObject = function(opt_includeInstance) {
  return proto.ortoo.ResponseState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ortoo.ResponseState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.ResponseState.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msg: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ortoo.ResponseState}
 */
proto.ortoo.ResponseState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ortoo.ResponseState;
  return proto.ortoo.ResponseState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ortoo.ResponseState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ortoo.ResponseState}
 */
proto.ortoo.ResponseState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ortoo.StateOfResponse} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ortoo.ResponseState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ortoo.ResponseState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ortoo.ResponseState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.ResponseState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional StateOfResponse state = 1;
 * @return {!proto.ortoo.StateOfResponse}
 */
proto.ortoo.ResponseState.prototype.getState = function() {
  return /** @type {!proto.ortoo.StateOfResponse} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ortoo.StateOfResponse} value */
proto.ortoo.ResponseState.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string msg = 2;
 * @return {string}
 */
proto.ortoo.ResponseState.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ortoo.ResponseState.prototype.setMsg = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ortoo.ClientRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ortoo.ClientRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ortoo.ClientRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.ClientRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.ortoo.MessageHeader.toObject(includeInstance, f),
    client: (f = msg.getClient()) && proto.ortoo.Client.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ortoo.ClientRequest}
 */
proto.ortoo.ClientRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ortoo.ClientRequest;
  return proto.ortoo.ClientRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ortoo.ClientRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ortoo.ClientRequest}
 */
proto.ortoo.ClientRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ortoo.MessageHeader;
      reader.readMessage(value,proto.ortoo.MessageHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.ortoo.Client;
      reader.readMessage(value,proto.ortoo.Client.deserializeBinaryFromReader);
      msg.setClient(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ortoo.ClientRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ortoo.ClientRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ortoo.ClientRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.ClientRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ortoo.MessageHeader.serializeBinaryToWriter
    );
  }
  f = message.getClient();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ortoo.Client.serializeBinaryToWriter
    );
  }
};


/**
 * optional MessageHeader header = 1;
 * @return {?proto.ortoo.MessageHeader}
 */
proto.ortoo.ClientRequest.prototype.getHeader = function() {
  return /** @type{?proto.ortoo.MessageHeader} */ (
    jspb.Message.getWrapperField(this, proto.ortoo.MessageHeader, 1));
};


/** @param {?proto.ortoo.MessageHeader|undefined} value */
proto.ortoo.ClientRequest.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ortoo.ClientRequest.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ortoo.ClientRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Client client = 2;
 * @return {?proto.ortoo.Client}
 */
proto.ortoo.ClientRequest.prototype.getClient = function() {
  return /** @type{?proto.ortoo.Client} */ (
    jspb.Message.getWrapperField(this, proto.ortoo.Client, 2));
};


/** @param {?proto.ortoo.Client|undefined} value */
proto.ortoo.ClientRequest.prototype.setClient = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ortoo.ClientRequest.prototype.clearClient = function() {
  this.setClient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ortoo.ClientRequest.prototype.hasClient = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ortoo.ClientResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ortoo.ClientResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ortoo.ClientResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.ClientResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.ortoo.MessageHeader.toObject(includeInstance, f),
    state: (f = msg.getState()) && proto.ortoo.ResponseState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ortoo.ClientResponse}
 */
proto.ortoo.ClientResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ortoo.ClientResponse;
  return proto.ortoo.ClientResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ortoo.ClientResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ortoo.ClientResponse}
 */
proto.ortoo.ClientResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ortoo.MessageHeader;
      reader.readMessage(value,proto.ortoo.MessageHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.ortoo.ResponseState;
      reader.readMessage(value,proto.ortoo.ResponseState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ortoo.ClientResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ortoo.ClientResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ortoo.ClientResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.ClientResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ortoo.MessageHeader.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ortoo.ResponseState.serializeBinaryToWriter
    );
  }
};


/**
 * optional MessageHeader header = 1;
 * @return {?proto.ortoo.MessageHeader}
 */
proto.ortoo.ClientResponse.prototype.getHeader = function() {
  return /** @type{?proto.ortoo.MessageHeader} */ (
    jspb.Message.getWrapperField(this, proto.ortoo.MessageHeader, 1));
};


/** @param {?proto.ortoo.MessageHeader|undefined} value */
proto.ortoo.ClientResponse.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ortoo.ClientResponse.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ortoo.ClientResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseState state = 2;
 * @return {?proto.ortoo.ResponseState}
 */
proto.ortoo.ClientResponse.prototype.getState = function() {
  return /** @type{?proto.ortoo.ResponseState} */ (
    jspb.Message.getWrapperField(this, proto.ortoo.ResponseState, 2));
};


/** @param {?proto.ortoo.ResponseState|undefined} value */
proto.ortoo.ClientResponse.prototype.setState = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ortoo.ClientResponse.prototype.clearState = function() {
  this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ortoo.ClientResponse.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ortoo.PushPullRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ortoo.PushPullRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ortoo.PushPullRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ortoo.PushPullRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.PushPullRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.ortoo.MessageHeader.toObject(includeInstance, f),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pushpullpacksList: jspb.Message.toObjectList(msg.getPushpullpacksList(),
    proto.ortoo.PushPullPack.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ortoo.PushPullRequest}
 */
proto.ortoo.PushPullRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ortoo.PushPullRequest;
  return proto.ortoo.PushPullRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ortoo.PushPullRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ortoo.PushPullRequest}
 */
proto.ortoo.PushPullRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ortoo.MessageHeader;
      reader.readMessage(value,proto.ortoo.MessageHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = new proto.ortoo.PushPullPack;
      reader.readMessage(value,proto.ortoo.PushPullPack.deserializeBinaryFromReader);
      msg.addPushpullpacks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ortoo.PushPullRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ortoo.PushPullRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ortoo.PushPullRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.PushPullRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ortoo.MessageHeader.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPushpullpacksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ortoo.PushPullPack.serializeBinaryToWriter
    );
  }
};


/**
 * optional MessageHeader header = 1;
 * @return {?proto.ortoo.MessageHeader}
 */
proto.ortoo.PushPullRequest.prototype.getHeader = function() {
  return /** @type{?proto.ortoo.MessageHeader} */ (
    jspb.Message.getWrapperField(this, proto.ortoo.MessageHeader, 1));
};


/** @param {?proto.ortoo.MessageHeader|undefined} value */
proto.ortoo.PushPullRequest.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ortoo.PushPullRequest.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ortoo.PushPullRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 ID = 2;
 * @return {number}
 */
proto.ortoo.PushPullRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ortoo.PushPullRequest.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated PushPullPack PushPullPacks = 3;
 * @return {!Array<!proto.ortoo.PushPullPack>}
 */
proto.ortoo.PushPullRequest.prototype.getPushpullpacksList = function() {
  return /** @type{!Array<!proto.ortoo.PushPullPack>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ortoo.PushPullPack, 3));
};


/** @param {!Array<!proto.ortoo.PushPullPack>} value */
proto.ortoo.PushPullRequest.prototype.setPushpullpacksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ortoo.PushPullPack=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ortoo.PushPullPack}
 */
proto.ortoo.PushPullRequest.prototype.addPushpullpacks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ortoo.PushPullPack, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.ortoo.PushPullRequest.prototype.clearPushpullpacksList = function() {
  this.setPushpullpacksList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ortoo.PushPullResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ortoo.PushPullResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ortoo.PushPullResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ortoo.PushPullResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.PushPullResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.ortoo.MessageHeader.toObject(includeInstance, f),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pushpullpacksList: jspb.Message.toObjectList(msg.getPushpullpacksList(),
    proto.ortoo.PushPullPack.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ortoo.PushPullResponse}
 */
proto.ortoo.PushPullResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ortoo.PushPullResponse;
  return proto.ortoo.PushPullResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ortoo.PushPullResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ortoo.PushPullResponse}
 */
proto.ortoo.PushPullResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ortoo.MessageHeader;
      reader.readMessage(value,proto.ortoo.MessageHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = new proto.ortoo.PushPullPack;
      reader.readMessage(value,proto.ortoo.PushPullPack.deserializeBinaryFromReader);
      msg.addPushpullpacks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ortoo.PushPullResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ortoo.PushPullResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ortoo.PushPullResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ortoo.PushPullResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ortoo.MessageHeader.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPushpullpacksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ortoo.PushPullPack.serializeBinaryToWriter
    );
  }
};


/**
 * optional MessageHeader header = 1;
 * @return {?proto.ortoo.MessageHeader}
 */
proto.ortoo.PushPullResponse.prototype.getHeader = function() {
  return /** @type{?proto.ortoo.MessageHeader} */ (
    jspb.Message.getWrapperField(this, proto.ortoo.MessageHeader, 1));
};


/** @param {?proto.ortoo.MessageHeader|undefined} value */
proto.ortoo.PushPullResponse.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ortoo.PushPullResponse.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ortoo.PushPullResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 ID = 2;
 * @return {number}
 */
proto.ortoo.PushPullResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ortoo.PushPullResponse.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated PushPullPack PushPullPacks = 3;
 * @return {!Array<!proto.ortoo.PushPullPack>}
 */
proto.ortoo.PushPullResponse.prototype.getPushpullpacksList = function() {
  return /** @type{!Array<!proto.ortoo.PushPullPack>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ortoo.PushPullPack, 3));
};


/** @param {!Array<!proto.ortoo.PushPullPack>} value */
proto.ortoo.PushPullResponse.prototype.setPushpullpacksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ortoo.PushPullPack=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ortoo.PushPullPack}
 */
proto.ortoo.PushPullResponse.prototype.addPushpullpacks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ortoo.PushPullPack, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.ortoo.PushPullResponse.prototype.clearPushpullpacksList = function() {
  this.setPushpullpacksList([]);
};


/**
 * @enum {number}
 */
proto.ortoo.SyncType = {
  LOCAL_ONLY: 0,
  MANUALLY: 1,
  NOTIFIABLE: 2
};

/**
 * @enum {number}
 */
proto.ortoo.TypeOfOperation = {
  SNAPSHOT: 0,
  DELETE: 2,
  ERROR: 3,
  TRANSACTION: 5,
  COUNTER_INCREASE: 11,
  HASH_MAP_PUT: 21,
  HASH_MAP_REMOVE: 22,
  LIST_INSERT: 31,
  LIST_DELETE: 32,
  LIST_UPDATE: 33,
  DOCUMENT_PUT_OBJ: 41,
  DOCUMENT_DEL_OBJ: 42,
  DOCUMENT_INS_ARR: 43,
  DOCUMENT_DEL_ARR: 44,
  DOCUMENT_UPD_ARR: 45
};

/**
 * @enum {number}
 */
proto.ortoo.TypeOfDatatype = {
  COUNTER: 0,
  HASH_MAP: 1,
  LIST: 2,
  DOCUMENT: 3
};

/**
 * @enum {number}
 */
proto.ortoo.StateOfDatatype = {
  DUE_TO_CREATE: 0,
  DUE_TO_SUBSCRIBE: 1,
  DUE_TO_SUBSCRIBE_CREATE: 2,
  SUBSCRIBED: 4,
  DUE_TO_UNSUBSCRIBE: 5,
  UNSUBSCRIBED: 6,
  DELETED: 7
};

/**
 * @enum {number}
 */
proto.ortoo.TypeOfMessage = {
  REQUEST_CLIENT: 0,
  REQUEST_PUSHPULL: 1,
  RESPONSE_CLIENT: 10,
  RESPONSE_PUSHPULL: 11
};

/**
 * @enum {number}
 */
proto.ortoo.StateOfResponse = {
  OK: 0,
  ERR_CLIENT_INVALID_COLLECTION: 101,
  ERR_CLIENT_INVALID_SYNCTYPE: 102
};

goog.object.extend(exports, proto.ortoo);
