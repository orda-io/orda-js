syntax = "proto3";

option go_package = "model";
package ortoo;

message Client {
    bytes CUID = 1;
    string alias = 2;
    string collection = 3;
    SyncType syncType = 4;
}

enum SyncType {
    LOCAL_ONLY = 0;
    MANUALLY = 1;
    NOTIFIABLE = 2;
}

message Timestamp {
    // @inject_tag: json:"e,omitempty"
    uint32 era = 1;
    // @inject_tag: json:"l,omitempty"
    uint64 lamport = 2;
    // @inject_tag: json:"c,omitempty"
    bytes CUID = 3;
    // @inject_tag: json:"d,omitempty"
    uint32 delimiter = 4;
}

message OperationID {
    // @inject_tag: json:"e,omitempty"
    uint32 era = 1;
    // @inject_tag: json:"l,omitempty"
    uint64 lamport = 2 [jstype = JS_STRING];
    // @inject_tag: json:"c,omitempty"
    bytes CUID = 3;
    // @inject_tag: json:"s,omitempty"
    uint64 seq = 4 [jstype = JS_STRING];
}

message Operation {
    OperationID ID = 1;
    TypeOfOperation opType = 2;
    bytes body = 3;
}

enum TypeOfOperation {
    SNAPSHOT = 0;
    DELETE = 2;
    ERROR = 3;
    TRANSACTION = 5;
    COUNTER_INCREASE = 11;
    HASH_MAP_PUT = 21;
    HASH_MAP_REMOVE = 22;
    LIST_INSERT = 31;
    LIST_DELETE = 32;
    LIST_UPDATE = 33;
    DOCUMENT_PUT_OBJ = 41;
    DOCUMENT_DEL_OBJ = 42;
    DOCUMENT_INS_ARR = 43;
    DOCUMENT_DEL_ARR = 44;
    DOCUMENT_UPD_ARR = 45;
}

enum TypeOfDatatype {
    COUNTER = 0;
    HASH_MAP = 1;
    LIST = 2;
    DOCUMENT = 3;
}

enum StateOfDatatype {
    DUE_TO_CREATE = 0;
    DUE_TO_SUBSCRIBE = 1;
    DUE_TO_SUBSCRIBE_CREATE = 2;
    SUBSCRIBED = 4;
    DUE_TO_UNSUBSCRIBE = 5;
    UNSUBSCRIBED = 6;
    DELETED = 7;
}

message PushPullPack {
    bytes DUID = 1;
    string key = 2;
    fixed32 option = 3;
    CheckPoint checkPoint = 4;
    uint32 era = 5;
    int32 type = 6;
    repeated Operation operations = 7;
}

message CheckPoint {
    // @inject_tag: bson:"s",json:"s"
    uint64 sseq = 1 [jstype = JS_STRING];
    // @inject_tag: bson:"c",json:"c"
    uint64 cseq = 2 [jstype = JS_STRING];
}

message NotificationPushPull {
    string CUID = 1;
    string DUID = 2;
    uint64 sseq = 3 [jstype = JS_STRING];
}

message DatatypeMeta {
    string key = 1;
    bytes DUID = 2;
    OperationID opID = 3;
    TypeOfDatatype typeOf = 4;
    StateOfDatatype state = 5;
}

message MessageHeader {
    string version = 1;
    uint32 seq = 2;
    TypeOfMessage typeOf = 3;
    string collection = 4;
    string clientAlias = 5;
    bytes cuid = 6;
}

enum TypeOfMessage {
    REQUEST_CLIENT = 0;
    REQUEST_PUSHPULL = 1;

    RESPONSE_CLIENT = 10;
    RESPONSE_PUSHPULL = 11;
}

enum StateOfResponse {
    OK = 0;
    ERR_CLIENT_INVALID_COLLECTION = 101;
    ERR_CLIENT_INVALID_SYNCTYPE = 102;
}

message ResponseState {
    StateOfResponse state = 1;
    string msg = 2;
}


message ClientRequest {
    MessageHeader header = 1;
    Client client = 2;
}

message ClientResponse {
    MessageHeader header = 1;
    ResponseState state = 2;
}


message PushPullRequest {
    MessageHeader header = 1;
    int32 ID = 2;
    repeated PushPullPack PushPullPacks = 3;
}

message PushPullResponse {
    MessageHeader header = 1;
    int32 ID = 2;
    repeated PushPullPack PushPullPacks = 3;
}

service OrtooService {
    rpc ProcessPushPull (PushPullRequest) returns (PushPullResponse);
    rpc ProcessClient (ClientRequest) returns (ClientResponse);
}
